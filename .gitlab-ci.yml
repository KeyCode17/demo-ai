image: python:3.10-slim

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

cache:
  paths:
    - .pip-cache/
    - venv/

stages:
  - test
  - build
  - deploy

before_script:
  - python -V
  - curl -LsSf https://astral.sh/uv/install.sh | sh
  - export PATH="/root/.cargo/bin:$PATH"
  - uv venv
  - . .venv/bin/activate
  - uv pip install -r requirements.txt

test:
  stage: test
  script:
    - uv pip install pytest
    - pytest

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

deploy:
  stage: deploy
  script:
    - echo "Deploy to production server"
    - |
      if [ ! -z "$DEPLOY_SERVER" ]; then
        apt-get update -qy
        apt-get install -y openssh-client
        eval $(ssh-agent -s)
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        scp docker-compose.yml $DEPLOY_USER@$DEPLOY_SERVER:~/ai-demo/
        ssh $DEPLOY_USER@$DEPLOY_SERVER "cd ~/ai-demo && docker-compose pull && docker-compose up -d"
      fi
  environment:
    name: production
  only:
    - main